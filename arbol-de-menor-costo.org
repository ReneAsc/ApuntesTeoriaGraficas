#+title: Árbol generador de menor costo

#+options: toc:nil

#+latex_header: \usepackage{listings}
#+latex_header: \lstalias{ipython}{python}
#+latex_header: \lstset{basicstyle=\small\ttfamily, frame=single}

#+latex_header: \usepackage{bera}

#+property: header-args:ipython :exports both :cache yes :session arbol :results raw drawer

* Problema

Supongamos que a cada arista de la gráfica completa \(K_{n}\) se le
asigna un valor ("peso"). Si a cada subgráfica le asignamos un peso
igual a la suma de los pesos de sus aristas, consideraremos el
problema de encontrar el árbol generador de menor peso.

* Algoritmo de Kruskal

El algoritmo de Kruskal consiste en escoger sucesivamente la arista
más barata de forma que no forme ciclo con la gráfica determinada por
las aristas escogidas previamente; si en algún momento existen varias
aristas que tienen el menor costo y no forman ciclos podemos escoger
cualquiera.

* Implementación en Python

Primeramente vamos a importar las bibliotecas que vamos a utilizar.

#+begin_src ipython
import networkx as nx
import matplotlib.pyplot as plt
from random import random as random
from scipy.spatial.distance import euclidean
#+end_src

#+RESULTS[2a253d47c089a054eb3655b60d8ccea8fad581c9]:
:results:
# Out[4]:
:end:

A continuación definiremos una gráfica aleatoria con 10 vértices.

#+begin_src ipython
g=nx.gnp_random_graph(10,0.2)
#+end_src

#+RESULTS[6cb25f08ff5c48547b3f4dfee8e011fbbf4547c2]:
:results:
# Out[5]:
:end:

Veremos si nuestra gráfica aleatoria es un bosque.

#+begin_src ipython
nx.is_forest(g), nx.is_connected(g)
#+end_src

#+RESULTS[e7d1dbb3a296c52111081a2873e11b0c5e1bcb99]:
:results:
# Out[6]:
: (True, False)
:end:

A continuación dibujaremos esta gráfica
#+begin_src ipython
nx.draw(g, with_labels=True)
#+end_src

#+RESULTS[7a5a44e71604efbb3ac02fd3863ef7628a5be23d]:
:results:
# Out[7]:
[[file:./obipy-resources/2747vnB.png]]
:end:

Calcularemos las componentes conexas de esta gráfica:
#+begin_src ipython
list(nx.connected_components(g))
#+end_src

#+RESULTS[fd43bac86ab4e6adb6ece858cb2c922a37acadb0]:
:results:
# Out[8]:
: [{0, 1, 2, 4, 5, 7, 8}, {3}, {6}, {9}]
:end:

Veamos la componente que contiene al vértice 2.

#+begin_src ipython
nx.node_connected_component(g,2)
#+end_src

#+RESULTS[5dbb8a5e23a82b97e43b14101c8f6ff99694deeb]:
:results:
# Out[9]:
: {0, 1, 2, 4, 5, 7, 8}
:end:

A continuación dibujaremos un árbol escogido aleatoriamente. 

#+begin_src ipython
t=nx.random_tree(10)
nx.draw(t, with_labels=True)
#+end_src

#+RESULTS[40cadd15ea973ae0dd4c6e9ce48469aa6584d9b0]:
:results:
# Out[10]:
[[file:./obipy-resources/27478xH.png]]
:end:

* Puntos en el plano

Si tenemos dos listas de números de tamaño =n=, podemos dibujar =n= puntos en el plano,
las coordenadas =x= de la primera lista y las coordenadas =y= de la segunda.

#+begin_src ipython
plt.plot([1,1,2],[1,2,3],'rx')
plt.axis([0,3,0,4])
plt.show()
#+end_src

#+RESULTS[cb7f2303e06b637a2a4cd483d81b5271406c82c4]:
:results:
# Out[12]:
[[file:./obipy-resources/2747WGU.png]]
:end:

Vamos a definir una función que dibuje =n= puntos en e plano aleatoriamente.

#+begin_src ipython
def puntos_en_el_plano(n):
   listax=[]
   listay=[]
   for i in range(n):
       listax.append(random())
       listay.append(random())
   return listax, listay
#+end_src

#+RESULTS[87d950b16476604565c8393cc732e1b59d79d4eb]:
:results:
# Out[14]:
:end:

#+begin_src ipython
puntos=puntos_en_el_plano(50)
#+end_src

#+RESULTS[9ff8894398a2a07a6c3e77984fe46197b54683d8]:
:results:
# Out[17]:
:end:

#+begin_src ipython
plt.plot(puntos[0], puntos[1], 'ro')
plt.show()
#+end_src

#+RESULTS[12dc3d5ca4cf9f9356e0578c369d2dd432cee3c9]:
:results:
# Out[16]:
[[file:./obipy-resources/2747jQa.png]]
:end:

Hagamos una función tal que a partir de dos listas, produzca el dibujo:

#+begin_src ipython
def dibujo_puntos(listax, listay):
    plt.plot(listax, listay, 'ro')
    plt.axis([-0.1,1.1,-0.1,1.1])
    plt.gca().set_aspect('equal')
    plt.show()
#+end_src

#+RESULTS[b62c33bac294c25d54476a3d29ed7d0fda02559e]:
:results:
# Out[22]:
:end:

#+begin_src ipython
dibujo_puntos(*puntos)
#+end_src

#+RESULTS[274d1e4a2e4c1e9a72c9f464a39ff8637dd52977]:
:results:
# Out[23]:
[[file:./obipy-resources/2747wag.png]]
:end:
